version: '3.9'

networks:
  internal:
    name: internal
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.150.0/24
  public:
    name: public

volumes:
  traefik:
    name: traefik

services:
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/bazarr:/config
      - ${DOWNLOADS}:/downloads
      - ${MEDIA}:/media
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.bazarr.entrypoints: https
      traefik.http.routers.bazarr.rule: Host(`bazarr.${DOMAIN}`)
      traefik.http.routers.bazarr.tls: 'true'
      traefik.http.routers.bazarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.bazarr.service: bazarr
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  cf-companion:
    image: docker.io/tiredofit/traefik-cloudflare-companion
    container_name: cf-companion
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ
      - TRAEFIK_VERSION=2
      - REFRESH_ENTRIES=true
      - CF_EMAIL
      - CF_TOKEN
      - TARGET_DOMAIN
      - DOMAIN1=${DOMAIN}
      - DOMAIN1_ZONE_ID=${CF_ZONE_ID}
      - DOMAIN1_PROXIED=FALSE

  dashy:
    image: docker.io/lissy93/dashy
    container_name: dashy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_CONF}/dashy/conf.yaml:/app/public/conf.yml
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.dashy.entrypoints: https
      traefik.http.routers.dashy.rule: Host(`${DOMAIN}`)
      traefik.http.routers.dashy.tls: 'true'
      traefik.http.routers.dashy.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.dashy.service: dashy
      traefik.http.services.dashy.loadbalancer.server.port: 80
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  dockergc:
    image: docker.io/clockworksoul/docker-gc-cron
    container_name: docker-gc
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      CRON: 30 4 * * * # https://cron.help/#30_4_*_*_*
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800 # 7 days
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1

  freshrss:
    image: lscr.io/linuxserver/freshrss
    container_name: freshrss
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/freshrss:/config
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.freshrss.entrypoints: https
      traefik.http.routers.freshrss.rule: Host(`freshrss.${DOMAIN}`)
      traefik.http.routers.freshrss.tls: 'true'
      traefik.http.routers.freshrss.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.freshrss.service: freshrss
      traefik.http.services.freshrss.loadbalancer.server.port: 80
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  overseerr:
    image: lscr.io/linuxserver/overseerr
    container_name: overseerr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro

      - ${APP_DATA}/overseerr:/config
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.overseerr.entrypoints: https
      traefik.http.routers.overseerr.rule: Host(`overseerr.${DOMAIN}`)
      traefik.http.routers.overseerr.tls: 'true'
      traefik.http.routers.overseerr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.overseerr.service: overseerr
      traefik.http.services.overseerr.loadbalancer.server.port: 5055
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  pasta:
    image: docker.io/cglatot/pasta
    container_name: pasta
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.pasta.entrypoints: https
      traefik.http.routers.pasta.rule: Host(`pasta.${DOMAIN}`)
      traefik.http.routers.pasta.tls: 'true'
      traefik.http.routers.pasta.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.pasta.service: pasta
      traefik.http.services.pasta.loadbalancer.server.port: 80
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:nightly
    container_name: prowlarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/prowlarr:/config
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.prowlarr.entrypoints: https
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${DOMAIN}`)
      traefik.http.routers.prowlarr.tls: 'true'
      traefik.http.routers.prowlarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.prowlarr.service: prowlarr
      traefik.http.services.prowlarr.loadbalancer.server.port: 8989
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/radarr:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.radarr.entrypoints: https
      traefik.http.routers.radarr.rule: Host(`radarr.${DOMAIN}`)
      traefik.http.routers.radarr.tls: 'true'
      traefik.http.routers.radarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.radarr.service: radarr
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  readarr:
    image: docker.io/linuxserver/readarr:nightly
    container_name: readarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/readarr:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.readarr.entrypoints: https
      traefik.http.routers.readarr.rule: Host(`readarr.${DOMAIN}`)
      traefik.http.routers.readarr.tls: 'true'
      traefik.http.routers.readarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.readarr.service: readarr
      traefik.http.services.readarr.loadbalancer.server.port: 8787
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/sabnzbd:/config
      - ${DOWNLOADS}:/downloads
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.sabnzbd.entrypoints: https
      traefik.http.routers.sabnzbd.rule: Host(`sabnzbd.${DOMAIN}`)
      traefik.http.routers.sabnzbd.tls: 'true'
      traefik.http.routers.sabnzbd.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.sabnzbd.service: sabnzbd
      traefik.http.services.sabnzbd.loadbalancer.server.port: 8080
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/sonarr:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.sonarr.entrypoints: https
      traefik.http.routers.sonarr.rule: Host(`sonarr.${DOMAIN}`)
      traefik.http.routers.sonarr.tls: 'true'
      traefik.http.routers.sonarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.sonarr.service: sonarr
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  tautulli:
    image: lscr.io/linuxserver/tautulli
    container_name: tautulli
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/tautulli:/config
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.tautulli.entrypoints: https
      traefik.http.routers.tautulli.rule: Host(`tautulli.${DOMAIN}`)
      traefik.http.routers.tautulli.tls: 'true'
      traefik.http.routers.tautulli.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.tautulli.service: tautulli
      traefik.http.services.tautulli.loadbalancer.server.port: 8181
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  tdarr:
    image: docker.io/haveagitgat/tdarr
    container_name: tdarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/tadarr:/app/server/Tdarr
      - ${TRANSCODING}/tdarr:/transcoding
      - ${MEDIA}:/media
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.tdarr.entrypoints: https
      traefik.http.routers.tdarr.rule: Host(`tadarr.${DOMAIN}`)
      traefik.http.routers.tdarr.tls: 'true'
      traefik.http.routers.tdarr.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.tdarr.service: tdarr
      traefik.http.services.tdarr.loadbalancer.server.port: 8265
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  tdarr-node:
    image: docker.io/haveagitgat/tdarr_node
    container_name: tdarr-node
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
      - nodeID=tdarr-node
      - nodeIP=tdarr-node
      - nodePort=8267
      - serverIP=tdarr
      - serverPort=8266
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${TRANSCODING}/tdarr:/transcoding
      - ${MEDIA}:/media
    labels:
      com.centurylinklabs.watchtower.enable: 'true'

  traefik:
    image: docker.io/traefik:v2.5
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - public
      - internal
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - traefik:/acme
    environment:
      CLOUDFLARE_EMAIL: ${CF_EMAIL}
      CLOUDFLARE_API_KEY: ${CF_TOKEN}
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      - --api=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.swarmMode=false
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --entrypoints.https.http.tls.certresolver=le-dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN
      - --certificatesResolvers.le-dns-cloudflare.acme.email=${CF_EMAIL}
      - --certificatesresolvers.le-dns-cloudflare.acme.dnschallenge=true
      - --certificatesResolvers.le-dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.le-dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.le-dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
      - --certificatesresolvers.le-dns-cloudflare.acme.storage=/acme/acme.json
    labels:
      traefik.enable: 'true'
      traefik.docker.network: public
      # HTTP-to-HTTPS Redirect
      traefik.http.routers.http_catchall.rule: HostRegexp(`{any:.+}`)
      traefik.http.routers.http_catchall.entrypoints: http
      traefik.http.routers.http_catchall.middlewares: https_redirect
      traefik.http.routers.traefik.rule: Host(`traefik-nuc-1.${DOMAIN}`)
      # HTTP Routers
      traefik.http.routers.traefik.entrypoints: https
      traefik.http.routers.traefik.tls: 'true'
      traefik.http.routers.traefik.tls.certresolver: le-dns-cloudflare
      # Services - API
      traefik.http.routers.traefik.service: api@internal
      # Middlewares
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: https
      traefik.http.middlewares.https_redirect.redirectscheme.permanent: 'true'

  transmission:
    image: docker.io/haugene/transmission-openvpn
    container_name: transmission
    restart: unless-stopped
    logging:
      driver: local
    dns:
      - 1.1.1.1
      - 1.0.0.1
    networks:
      internal:
        ipv4_address: 192.168.150.111
    cap_add:
      - NET_ADMIN
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/transmission:/config
      - ${DOWNLOADS}:/downloads
    environment:
      - TZ
      - PUID
      - PGID
      - UMASK_SET="18"
      - OPENVPN_PROVIDER
      - OPENVPN_CONFIG
      - OPENVPN_USERNAME
      - OPENVPN_PASSWORD
      - CREATE_TUN_DEVICE="true"
      - TRANSMISSION_UTP_ENABLED="false"
      - TRANSMISSION_DOWNLOADS=/downloads
      - TRANSMISSION_DOWNLOADS_INCOMPLETE=/incomplete-downloads
      - TRANSMISSION_INCOMPLETE_DIR_ENABLED="true"
      - TRANSMISSION_WEB_UI="transmission-web-control"
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.transmission.entrypoints: https
      traefik.http.routers.transmission.rule: Host(`transmission.${DOMAIN}`)
      traefik.http.routers.transmission.tls: 'true'
      traefik.http.routers.transmission.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.transmission.service: transmission
      traefik.http.services.transmission.loadbalancer.server.port: 9091
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  tubesync:
    image: ghcr.io/meeb/tubesync
    container_name: tubesync
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/tubesync:/config
      - ${DOWNLOADS}:/downloads
    environment:
      - TZ
      - PUID
      - PGID
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.tubesync.entrypoints: https
      traefik.http.routers.tubesync.rule: Host(`tubesync.${DOMAIN}`)
      traefik.http.routers.tubesync.tls: 'true'
      traefik.http.routers.tubesync.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.tubesync.service: tubesync
      traefik.http.services.tubesync.loadbalancer.server.port: 4848
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  vaultwarden:
    image: docker.io/vaultwarden/server
    container_name: vaultwarden
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA}/vaultwarden:/data
    environment:
      - TZ
      - PUID
      - PGID
      - SHOW_PASSWORD_HINTS=false
      - WEB_VAULT_ENABLED=true
      - DATA_FOLDER=/data
    labels:
      traefik.enable: 'true'
      # HTTP Routers
      traefik.http.routers.vaultwarden.entrypoints: https
      traefik.http.routers.vaultwarden.rule: Host(`vaultwarden.${DOMAIN}`)
      traefik.http.routers.vaultwarden.tls: 'true'
      traefik.http.routers.vaultwarden.tls.certresolver: le-dns-cloudflare
      # Services
      traefik.http.routers.vaultwarden.service: vaultwarden
      traefik.http.services.vaultwarden.loadbalancer.server.port: 80
      # Watchtower
      com.centurylinklabs.watchtower.enable: 'true'

  watchtower:
    image: docker.io/containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      WATCHTOWER_LABEL_ENABLE: 'true'
      WATCHTOWER_CLEANUP: 'true'
      WATCHTOWER_REMOVE_VOLUMES: 'true'
      WATCHTOWER_INCLUDE_STOPPED: 'true'
      WATCHTOWER_INCLUDE_RESTARTING: 'true'
      WATCHTOWER_NO_STARTUP_MESSAGE: 'false'
      WATCHTOWER_SCHEDULE: 30 6 * * * * # Everyday at 6:30AM
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
      DOCKER_API_VERSION: '1.39'
    labels:
      com.centurylinklabs.watchtower.enable: 'true'
