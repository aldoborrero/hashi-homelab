version: '3.9'

networks:
  default:
    name: homelab
  internal:
    name: internal
    # driver: bridge
    # ipam:
    #   config:
    #     - subnet: 192.168.150.0/24
  public:
    name: public

volumes:
  traefik:
    name: traefik

services:
  bazarr:
    image: lscr.io/linuxserver/bazarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BAZARR_CONFIG}:/config
      - ${DOWNLOADS}:/downloads
      - ${MEDIA}:/media
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.bazarr.entrypoints: https
        traefik.http.routers.bazarr.rule: Host(`${BAZARR_DOMAIN}`)
        traefik.http.routers.bazarr.tls: 'true'
        traefik.http.routers.bazarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.bazarr.service: bazarr
        traefik.http.services.bazarr.loadbalancer.server.port: 6767
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  bazarr-anime:
    image: lscr.io/linuxserver/bazarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BAZARR_CONFIG}:/config
      - ${DOWNLOADS}:/downloads
      - ${MEDIA}:/media
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.bazarr-anime.entrypoints: https
        traefik.http.routers.bazarr-anime.rule: Host(`${BAZARR_ANIME_DOMAIN}`)
        traefik.http.routers.bazarr-anime.tls: 'true'
        traefik.http.routers.bazarr-anime.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.bazarr-anime.service: bazarr-anime
        traefik.http.services.bazarr-anime.loadbalancer.server.port: 6767
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  bazarr-documentaries:
    image: lscr.io/linuxserver/bazarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BAZARR_CONFIG}:/config
      - ${DOWNLOADS}:/downloads
      - ${MEDIA}:/media
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.bazarr-documentaries.entrypoints: https
        traefik.http.routers.bazarr-documentaries.rule: Host(`${BAZARR_DOCUMENTARIES_DOMAIN}`)
        traefik.http.routers.bazarr-documentaries.tls: 'true'
        traefik.http.routers.bazarr-documentaries.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.bazarr-documentaries.service: bazarr-documentaries
        traefik.http.services.bazarr-documentaries.loadbalancer.server.port: 6767
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  bitwarden:
    image: docker.io/vaultwarden/server
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BITWARDEN_CONF}:/data
    environment:
      - TZ
      - PUID
      - PGID
      - SHOW_PASSWORD_HINTS=false
      - WEB_VAULT_ENABLED=true
      - DATA_FOLDER=/data
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.bitwarden.entrypoints: https
        traefik.http.routers.bitwarden.rule: Host(`${BITWARDEN_DOMAIN}`)
        traefik.http.routers.bitwarden.tls: 'true'
        traefik.http.routers.bitwarden.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.bitwarden.service: bitwarden
        traefik.http.services.bitwarden.loadbalancer.server.port: 80
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  # cf-companion:
  #   image: docker.io/tiredofit/traefik-cloudflare-companion
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   logging:
  #     driver: local
  #   networks:
  #     - internal
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - TZ
  #     - TRAEFIK_VERSION=2
  #     - REFRESH_ENTRIES=true
  #     - SWARM_MODE=TRUE
  #     - CF_EMAIL
  #     - CF_TOKEN
  #     - TARGET_DOMAIN
  #     - DOMAIN1=${DOMAIN}
  #     - DOMAIN1_TARGET_DOMAIN
  #     - DOMAIN1_ZONE_ID=${CF_ZONE_ID}
  #     - DOMAIN1_PROXIED=FALSE

  dashy:
    image: docker.io/lissy93/dashy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DASHY_CONF}:/app/public/conf.yml
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.dashy.entrypoints: https
        traefik.http.routers.dashy.rule: Host(`${DASHY_DOMAIN}`)
        traefik.http.routers.dashy.tls: 'true'
        traefik.http.routers.dashy.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.dashy.service: dashy
        traefik.http.services.dashy.loadbalancer.server.port: 80
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  # dockergc:
  #   image: docker.io/clockworksoul/docker-gc-cron
  #   logging:
  #     driver: local
  #   networks:
  #     - internal
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     CRON: 30 4 * * * # https://cron.help/#30_4_*_*_*
  #     FORCE_IMAGE_REMOVAL: 1
  #     FORCE_CONTAINER_REMOVAL: 0
  #     GRACE_PERIOD_SECONDS: 604800 # 7 days
  #     DRY_RUN: 0
  #     CLEAN_UP_VOLUMES: 1

  freshrss:
    image: lscr.io/linuxserver/freshrss
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${FRESHRSS_CONF}:/config
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.freshrss.entrypoints: https
        traefik.http.routers.freshrss.rule: Host(`${FRESHRSS_DOMAIN}`)
        traefik.http.routers.freshrss.tls: 'true'
        traefik.http.routers.freshrss.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.freshrss.service: freshrss
        traefik.http.services.freshrss.loadbalancer.server.port: 80
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  overseerr:
    image: lscr.io/linuxserver/overseerr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${OVERSEERR_CONF}:/config
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.overseerr.entrypoints: https
        traefik.http.routers.overseerr.rule: Host(`${OVERSEERR_DOMAIN}`)
        traefik.http.routers.overseerr.tls: 'true'
        traefik.http.routers.overseerr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.overseerr.service: overseerr
        traefik.http.services.overseerr.loadbalancer.server.port: 5055
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  pasta:
    image: docker.io/cglatot/pasta
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.pasta.entrypoints: https
        traefik.http.routers.pasta.rule: Host(`${PASTA_DOMAIN}`)
        traefik.http.routers.pasta.tls: 'true'
        traefik.http.routers.pasta.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.pasta.service: pasta
        traefik.http.services.pasta.loadbalancer.server.port: 80
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  plex:
    image: lscr.io/linuxserver/plex
    restart: unless-stopped
    networks:
      - internal
    ports:
      - '32400:32400' # (for access to the Plex Media Server)
      - '3005:3005' # (for controlling Plex Home Theater via Plex Companion)
      - '8324:8324' # (for controlling Plex for Roku via Plex Companion)
      - '32410:32410/udp' # (for current GDM network discovery)
      - '32412:32412/udp' # (for current GDM network discovery)
      - '32413:32413/udp' # (for current GDM network discovery)
      - '32414:32414/udp' # (for current GDM network discovery)
      - '32469:32469' # (for access to the Plex DLNA Server)
    logging:
      driver: local
    environment:
      - PUID
      - PGID
      - VERSION=docker
      - PLEX_CLAIM
      - PLEX_PASS
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PLEX_CONF}:/config
      - ${PLEX_MEDIA}:/media
      - ${PLEX_TRANSCODE}:/transcode
    deploy:
      placement:
        constraints:
          - node.hostname == nas
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.plex.entrypoints: https
        traefik.http.routers.plex.rule: Host(`${PLEX_DOMAIN}`)
        traefik.http.routers.plex.tls: 'true'
        # Services
        traefik.http.routers.plex.service: plex
        traefik.http.services.plex.loadbalancer.server.port: 32400
        traefik.http.routers.plex.tls.certresolver: letsencrypt
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  # plex-trakt-sync:
  #   image: ghcr.io/taxel/plextraktsync
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   networks:
  #     - internal
  #   logging:
  #     driver: local
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${PLEX_TRAKT_SYNC_DATA}/plex/trakt-sync/:/app/config/
  #   command: watch
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.hostname == nuc-1

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:nightly
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PROWLARR_CONF}:/config
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.prowlarr.entrypoints: https
        traefik.http.routers.prowlarr.rule: Host(`${PROWLARR_DOMAIN}`)
        traefik.http.routers.prowlarr.tls: 'true'
        traefik.http.routers.prowlarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.prowlarr.service: prowlarr
        traefik.http.services.prowlarr.loadbalancer.server.port: 9696
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  radarr:
    image: lscr.io/linuxserver/radarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${RADARR_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.radarr.entrypoints: https
        traefik.http.routers.radarr.rule: Host(`${RADARR_DOMAIN}`)
        traefik.http.routers.radarr.tls: 'true'
        traefik.http.routers.radarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.radarr.service: radarr
        traefik.http.services.radarr.loadbalancer.server.port: 7878
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  radarr-anime:
    image: lscr.io/linuxserver/radarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${RADARR_ANIME_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.radarr-anime.entrypoints: https
        traefik.http.routers.radarr-anime.rule: Host(`${RADARR_ANIME_DOMAIN}`)
        traefik.http.routers.radarr-anime.tls: 'true'
        traefik.http.routers.radarr-anime.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.radarr-anime.service: radarr-anime
        traefik.http.services.radarr-anime.loadbalancer.server.port: 7878
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  radarr-documentaries:
    image: lscr.io/linuxserver/radarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${RADARR_DOCUMENTARIES_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.radarr-documentaries.entrypoints: https
        traefik.http.routers.radarr-documentaries.rule: Host(`${RADARR_DOCUMENTARIES_DOMAIN}`)
        traefik.http.routers.radarr-documentaries.tls: 'true'
        traefik.http.routers.radarr-documentaries.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.radarr-documentaries.service: radarr-documentaries
        traefik.http.services.radarr-documentaries.loadbalancer.server.port: 7878
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  readarr:
    image: lscr.io/linuxserver/readarr:nightly
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${READARR_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.readarr.entrypoints: https
        traefik.http.routers.readarr.rule: Host(`${READARR_DOMAIN}`)
        traefik.http.routers.readarr.tls: 'true'
        traefik.http.routers.readarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.readarr.service: readarr
        traefik.http.services.readarr.loadbalancer.server.port: 8787
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SABNZBD_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.sabnzbd.entrypoints: https
        traefik.http.routers.sabnzbd.rule: Host(`${SABNZBD_DOMAIN}`)
        traefik.http.routers.sabnzbd.tls: 'true'
        traefik.http.routers.sabnzbd.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.sabnzbd.service: sabnzbd
        traefik.http.services.sabnzbd.loadbalancer.server.port: 8080
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  sonarr:
    image: lscr.io/linuxserver/sonarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SONARR_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.sonarr.entrypoints: https
        traefik.http.routers.sonarr.rule: Host(`${SONARR_DOMAIN}`)
        traefik.http.routers.sonarr.tls: 'true'
        traefik.http.routers.sonarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.sonarr.service: sonarr
        traefik.http.services.sonarr.loadbalancer.server.port: 8989
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  sonarr-anime:
    image: lscr.io/linuxserver/sonarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SONARR_ANIME_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.sonarr-anime.entrypoints: https
        traefik.http.routers.sonarr-anime.rule: Host(`${SONARR_ANIME_DOMAIN}`)
        traefik.http.routers.sonarr-anime.tls: 'true'
        traefik.http.routers.sonarr-anime.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.sonarr-anime.service: sonarr-anime
        traefik.http.services.sonarr-anime.loadbalancer.server.port: 8989
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  sonarr-documentaries:
    image: lscr.io/linuxserver/sonarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SONARR_DOCUMENTARIES_CONFIG}:/config
      - ${MEDIA}:/media
      - ${DOWNLOADS}:/downloads
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.sonarr-documentaries.entrypoints: https
        traefik.http.routers.sonarr-documentaries.rule: Host(`${SONARR_DOCUMENTARIES_DOMAIN}`)
        traefik.http.routers.sonarr-documentaries.tls: 'true'
        traefik.http.routers.sonarr-documentaries.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.sonarr-documentaries.service: sonarr-documentaries
        traefik.http.services.sonarr-documentaries.loadbalancer.server.port: 8989
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  tautulli:
    image: lscr.io/linuxserver/tautulli
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${TAUTULLI_CONFIG}:/config
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.tautulli.entrypoints: https
        traefik.http.routers.tautulli.rule: Host(`${TAUTULLI_DOMAIN}`)
        traefik.http.routers.tautulli.tls: 'true'
        traefik.http.routers.tautulli.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.tautulli.service: tautulli
        traefik.http.services.tautulli.loadbalancer.server.port: 8181
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  tdarr:
    image: docker.io/haveagitgat/tdarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${TDARR_CONFIG}:/app/server/Tdarr
      - ${TRANSCODING}/tdarr:/transcoding
      - ${MEDIA}:/media
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.tdarr.entrypoints: https
        traefik.http.routers.tdarr.rule: Host(`${TDARR_DOMAIN}`)
        traefik.http.routers.tdarr.tls: 'true'
        traefik.http.routers.tdarr.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.tdarr.service: tdarr
        traefik.http.services.tdarr.loadbalancer.server.port: 8265
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  tdarr-node:
    image: docker.io/haveagitgat/tdarr_node
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    environment:
      - TZ
      - PUID
      - PGID
      - nodeID=tdarr-node
      - nodeIP=tdarr-node
      - nodePort=8267
      - serverIP=tdarr
      - serverPort=8266
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${TRANSCODING}/tdarr:/transcoding
      - ${MEDIA}:/media
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        com.centurylinklabs.watchtower.enable: 'true'

  traefik:
    image: docker.io/traefik:v2.5
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - public
      - internal
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - traefik:/acme
    environment:
      CLOUDFLARE_EMAIL: ${CF_EMAIL}
      CLOUDFLARE_API_KEY: ${CF_TOKEN}
    command:
      # Disable certain settings
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      # Enable logging
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      # Enable API & Dashboard
      - --api=true
      - --api.dashboard=true
      # Configure Docker provider
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      # Configure entrypoints (HTTP & HTTPS)
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      # Set up the TLS configuration for HTTPS
      - --entrypoints.https.http.tls.certresolver=letsencrypt
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN
      # Configure LetsEncrypt
      - --certificatesResolvers.letsencrypt.acme.email=${CF_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=90
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
    deploy:
      placement:
        constraints:
          - node.hostname == nas
      labels:
        traefik.enable: 'true'
        traefik.docker.network: public
        # HTTP-to-HTTPS Redirect
        traefik.http.routers.http_catchall.rule: HostRegexp(`{any:.+}`)
        traefik.http.routers.http_catchall.entrypoints: http
        traefik.http.routers.http_catchall.middlewares: https_redirect
        # Traefik Dashboard
        traefik.http.routers.traefik.rule: Host(`${TRAEFIK_DOMAIN}`)
        traefik.http.routers.traefik.service: api@internal
        # HTTP Routers
        traefik.http.routers.traefik.entrypoints: https
        traefik.http.routers.traefik.tls: 'true'
        traefik.http.routers.traefik.tls.certresolver: letsencrypt
        # Middlewares
        traefik.http.middlewares.https_redirect.redirectscheme.scheme: https
        traefik.http.middlewares.https_redirect.redirectscheme.permanent: 'true'

  # transmission:
  #   image: docker.io/haugene/transmission-openvpn
  #   restart: unless-stopped
  #   logging:
  #     driver: local
  #   dns:
  #     - 1.1.1.1
  #     - 1.0.0.1
  #   networks:
  #     - internal
  #   cap_add:
  #     - NET_ADMIN
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${TRANSMISSION_CONFIG}:/config
  #     - ${DOWNLOADS}:/downloads
  #   environment:
  #     - TZ
  #     - PUID
  #     - PGID
  #     - UMASK_SET="18"
  #     - OPENVPN_PROVIDER
  #     - OPENVPN_CONFIG
  #     - OPENVPN_USERNAME
  #     - OPENVPN_PASSWORD
  #     - CREATE_TUN_DEVICE="true"
  #     - TRANSMISSION_UTP_ENABLED="false"
  #     - TRANSMISSION_DOWNLOADS=/downloads
  #     - TRANSMISSION_DOWNLOADS_INCOMPLETE=/incomplete-downloads
  #     - TRANSMISSION_INCOMPLETE_DIR_ENABLED="true"
  #     - TRANSMISSION_WEB_UI="transmission-web-control"
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.hostname == nuc-1
  #     labels:
  #       traefik.enable: 'true'
  #       # HTTP Routers
  #       traefik.http.routers.transmission.entrypoints: https
  #       traefik.http.routers.transmission.rule: Host(`${TRANSMISSION_DOMAIN}`)
  #       traefik.http.routers.transmission.tls: 'true'
  #       traefik.http.routers.transmission.tls.certresolver: letsencrypt
  #       # Services
  #       traefik.http.routers.transmission.service: transmission
  #       traefik.http.services.transmission.loadbalancer.server.port: 9091
  #       # Watchtower
  #       com.centurylinklabs.watchtower.enable: 'true'

  tubesync:
    image: ghcr.io/meeb/tubesync
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${TUBESYNC_CONFIG}:/config
      - ${DOWNLOADS}:/downloads
    environment:
      - TZ
      - PUID
      - PGID
    deploy:
      placement:
        constraints:
          - node.hostname == nuc-1
      labels:
        traefik.enable: 'true'
        # HTTP Routers
        traefik.http.routers.tubesync.entrypoints: https
        traefik.http.routers.tubesync.rule: Host(`${TUBESYNC_DOMAIN}`)
        traefik.http.routers.tubesync.tls: 'true'
        traefik.http.routers.tubesync.tls.certresolver: letsencrypt
        # Services
        traefik.http.routers.tubesync.service: tubesync
        traefik.http.services.tubesync.loadbalancer.server.port: 4848
        # Watchtower
        com.centurylinklabs.watchtower.enable: 'true'

  # watchtower:
  #   image: docker.io/containrrr/watchtower
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   logging:
  #     driver: local
  #   networks:
  #     - internal
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     WATCHTOWER_LABEL_ENABLE: 'true'
  #     WATCHTOWER_CLEANUP: 'true'
  #     WATCHTOWER_REMOVE_VOLUMES: 'true'
  #     WATCHTOWER_INCLUDE_STOPPED: 'true'
  #     WATCHTOWER_INCLUDE_RESTARTING: 'true'
  #     WATCHTOWER_NO_STARTUP_MESSAGE: 'false'
  #     WATCHTOWER_SCHEDULE: 30 6 * * * * # Everyday at 6:30AM
  #     WATCHTOWER_NOTIFICATIONS_LEVEL: info
  #     DOCKER_API_VERSION: '1.39'
  #   labels:
  #     com.centurylinklabs.watchtower.enable: 'true'
